{"version":3,"sources":["serviceWorker.js","actions/index.js","containers/book_list.js","containers/book_detail.js","components/app.js","reducers/index.js","reducers/reducer_books.js","reducers/reducer_activeBook.js","index.js"],"names":["Boolean","window","location","hostname","match","selectBook","book","type","payload","BookList","_this","this","props","books","map","react_default","a","createElement","key","title","onClick","className","renderList","Component","connect","state","dispatch","bindActionCreators","BookDetail","pages","activeBook","App","book_list","book_detail","rootReducer","combineReducers","arguments","length","undefined","action","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","es","store","reducers","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGClBOC,EAAa,SAACC,GAEzB,MAAO,CACHC,KAAM,gBACNC,QAASF,ICCTG,uLAIS,IAAAC,EAAAC,KACT,OAAOA,KAAKC,MAAMC,MAAMC,IAAI,SAAAR,GAC1B,OACIS,EAAAC,EAAAC,cAAA,MACCC,IAAKZ,EAAKa,MACTC,QAAS,kBAAMV,EAAKE,MAAMP,WAAWC,IACrCe,UAAU,mBACTf,EAAKa,0CAOhB,OACEJ,EAAAC,EAAAC,cAAA,MAAII,UAAU,uBACXV,KAAKW,qBApBSC,aA0CRC,kBATf,SAAyBC,GAEvB,MAAO,CACHZ,MAAOY,EAAMZ,QATnB,SAA4Ba,GAE1B,OAAOC,YAAmB,CAAEtB,WAAYA,GACvCqB,IAYYF,CAA6Cf,GC5CtDmB,mLAGF,OAAIjB,KAAKC,MAAMN,KAIbS,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBAAYN,KAAKC,MAAMN,KAAKa,OAC5BJ,EAAAC,EAAAC,cAAA,oBAAYN,KAAKC,MAAMN,KAAKuB,QANvBd,EAAAC,EAAAC,cAAA,mDAJYM,aAwBVC,kBANf,SAAyBC,GACvB,MAAO,CACLnB,KAAMmB,EAAMK,aAIDN,CAAyBI,GCtBnBG,mLAEjB,OACEhB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cAL6BV,aCIlBW,EALKC,YAAgB,CAClCtB,MCLa,WACb,MAAO,CACL,CAACM,MAAM,8BAA+BU,MAAO,GAC7C,CAACV,MAAM,kCAAmCU,MAAO,IACjD,CAACV,MAAM,+BAAgCU,MAAO,KAC9C,CAACV,MAAM,kCAAmCU,MAAO,IACjD,CAACV,MAAM,wBAAyBU,MAAO,MDAzCC,WELa,WAA2B,IAA1BL,EAA0BW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlB,KAAOG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAExC,OAAOC,EAAOhC,MACZ,IAAK,gBACL,OAAOgC,EAAO/B,QAEhB,OAAOiB,KCIHe,EAA4BC,cAAkBC,KAEpDC,IAASC,OACP7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUC,MAAON,EAA0BO,IACzChC,EAAAC,EAAAC,cAAC+B,EAAD,OAEAC,SAASC,eAAe,SRgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd701719.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const selectBook = (book) => {\r\n  // selectBook is an action creator, needs to return an action (object with a type property)\r\n  return {\r\n      type: 'BOOK_SELECTED',\r\n      payload: book\r\n  };\r\n}\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {selectBook} from '../actions/index';\r\nimport { bindActionCreators} from 'redux';\r\n\r\nclass BookList extends Component {\r\n\r\n\r\n\r\n  renderList() {\r\n      return this.props.books.map(book => {\r\n        return (\r\n            <li\r\n             key={book.title}\r\n              onClick={() => this.props.selectBook(book)}\r\n              className=\"list-group-item\">\r\n              {book.title}\r\n              </li>\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"list-group col-sm-4\">\r\n        {this.renderList()}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\n// Anything returned from this function will end up as Props on the BookList container\r\nfunction mapDispatchToProps(dispatch) {\r\n  // Whenever selectBook is called, the result should be passed to all of our reducers\r\n  return bindActionCreators({ selectBook: selectBook // from import\r\n}, dispatch)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n// Whatever is returned is to show up as props inside of BookList\r\n  return {\r\n      books: state.books\r\n  };\r\n}\r\n\r\n// Promote BookList from a component to a container - it needs to know about this new dispatch method, selectBook.\r\n// Make it available as a prop\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass BookDetail extends Component {\r\n\r\n  render() {\r\n    if(!this.props.book) {\r\n      return <div>Select a Book to Get Started!</div>;\r\n    }\r\n    return(\r\n      <div>\r\n        <h3>Details for:</h3>\r\n        <div>Title:{this.props.book.title}</div>\r\n        <div>Pages:{this.props.book.pages}</div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    book: state.activeBook\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(BookDetail);\r\n","import React, { Component } from 'react';\r\nimport BookList from '../containers/book_list';\r\nimport BookDetail from '../containers/book_detail';\r\n\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n    <BookList />\r\n    <BookDetail />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n","import BooksReducer from './reducer_books';\r\nimport ActiveBookReducer from './reducer_activeBook';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  books: BooksReducer,\r\n  activeBook: ActiveBookReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","export default () => {\r\n  return [\r\n    {title:'Javascript: The Weird Parts', pages: 7},\r\n    {title:'Adnan: You will make it happen!', pages: 83},\r\n    {title:'IT + Marketing is IMarketing', pages: 763},\r\n    {title:'Cool Things Take time to Happen', pages: 78},\r\n    {title:'At the end of the day', pages: 13}\r\n  ]\r\n}\r\n","// State argument is not application State, only the reducer state\r\nexport default (state = null , action) => {\r\n\r\n  switch(action.type) {\r\n    case 'BOOK_SELECTED':\r\n    return action.payload;\r\n  }\r\n  return state;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nimport App from './components/app';\r\nimport reducers from './reducers';\r\n\r\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\r\n\r\nReactDOM.render(\r\n  <Provider store={createStoreWithMiddleware(reducers)}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}